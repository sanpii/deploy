#!/usr/bin/env bash

set -e

source "$(dirname $(realpath $BASH_SOURCE))/../config/current.sh"

function main()
{
    set +e
    pushMirrors
    set -e
    unset GIT_DIR

    if [[ "$(getBranch)" == "master" ]]
    then
        pushPublic
    fi

    if [[ "$(getBranch)" == "gh-pages" ]]
    then
        ghPages
    fi
}

function pushMirrors()
{
    if [[ ! "$(getBranch)" =~ ^private- ]]
    then
        for remote in $(git remote)
        do
            echo "Push to $remote"
            git push --force --quiet --all "$remote" > /dev/null
        done
    fi
}

function pushPublic()
{
    local public=$(git config --get custom.public)

    if [[ $public == true ]]
    then
        echo "Publish repository"

        local src=$(getSourceDirectory)
        local dst=$(getRealPublicDirectory)
        local cloneUrl=$(getCloneUrl)

        if [[ ! -d "$(basename $dst)" ]]
        then
            mkdir --parents "$(basename $dst)"
        fi

        git clone --quiet "$src" "$dst"
        linkConfiguration

        cd "$dst"
        installVendors
        installAssets
        clearCache
        cd - >/dev/null

        publish
    fi
}

function linkConfiguration()
{
    local config="/etc/app/$(getProjectName)"
    local dst=$(getRealPublicDirectory)

    if [[ -d "$config" ]]
    then
        for src in $(find "$config" -type f)
        do
            local link=$(echo $src | sed "s~$config~$dst~")

            ln --symbolic --force $src $link
        done
    fi
}

function installVendors()
{
    if [[ -f "composer.json" ]]
    then
        readonly COMPOSER="$HOME/.local/bin/composer.phar"

        if [[ ! -e "vendor" ]]
        then
            echo "Install vendors"
            php "$COMPOSER" install --no-interaction --no-dev
        else
            echo "Update vendors"
            php "$COMPOSER" update --no-interaction --no-dev
        fi
    fi
}

function installAssets()
{
    if [[ -f "bower.json" ]]
    then
        echo "Install assets"
        bower install
    fi
}

function clearCache()
{
    local console="bin/console"

    if [[ ! -f "$console" ]]
    then
        console="app/console"
    fi

    if [[ -f "$console" ]]
    then
        php "$console" cache:clear --env=prod
        php "$console" assets:install --env=prod web --symlink --relative
        php "$console" assetic:dump --env=prod
    fi
}

function publish()
{
    local src=$(getRealPublicDirectory)
    local dst=$(getPublicDirectory)

    ln --symbolic --force --no-target-directory "$src" "$dst"
}

function ghPages()
{
    echo "Publish static pages"

    local src=$(getSourceDirectory)
    local dst=$(getPublicDirectory | sed "s~$PUBLIC_REPOSITORIES_DIR~$WEBROOT_DIR~")

    if [[ ! -d "$dst" ]]
    then
        git clone --quiet --branch gh-pages "$src" "$dst"
    else
        cd "$dst"
        git fetch --quiet origin
        git reset --quiet --hard origin/gh-pages
    fi
}

function purgeCache()
{
    local url=$1

    echo 'Purge cache'
    ssh reverse-proxy 'for f in $(find /var/cache/nginx/ -type f -exec grep -la "^KEY: $url" {} \;); do rm $f; done'
}

function getProjectName()
{
    echo $(basename $(dirname $(getPublicDirectory)))
}

function getSourceDirectory()
{
    pwd
}

function getPublicDirectory()
{
    local src=$(getSourceDirectory)

    echo "$src" | sed "s~$REPOSITORIES_DIR~$PUBLIC_REPOSITORIES_DIR~" | sed 's~\.git$~/current~'
}

function getRealPublicDirectory()
{
    local src=$(getPublicDirectory)

    echo "$src" | sed "s~/current$~/releases/$NEWREV~"
}

function getCloneUrl()
{
    local src=$(getSourceDirectory)

    echo "$src" | sed "s~$REPOSITORIES_DIR~git://$GIT_DOMAIN~"
}

function getBranch()
{
    echo $(git rev-parse --symbolic --abbrev-ref $REFNAME 2> /dev/null)
}

read OLDREV NEWREV REFNAME

main $@
