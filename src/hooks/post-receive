#!/usr/bin/env bash

set -e

source "$(dirname $(realpath $BASH_SOURCE))/../config/current.sh"

function main()
{
    read OLDREV NEWREV REFNAME

    deploy
}

function deploy()
{
    set +e
    pushMirrors
    set -e
    unset GIT_DIR

    if $(shouldPublish)
    then
        pushPublic
    fi

    if [[ "$(getBranch)" == "gh-pages" ]]
    then
        ghPages
    fi
}

function shouldPublish()
{
    local branch=$(getBranch)

    [[ "$branch" == "master" ]] || [[ "$branch" == "main" ]]
}

function pushMirrors()
{
    if [[ ! "$(getBranch)" =~ ^private- ]]
    then
        for remote in $(git remote)
        do
            info "Push to $remote"
            git push --prune "$remote" '+refs/heads/*' '+refs/tags/*:refs/tags/*'
        done
    fi
}

function pushPublic()
{
    local public=$(git config --get custom.public)

    if [[ $public == true ]]
    then
        info 'Publish repository'

        local start=$(date +%s)
        local dst=$(getRealPublicDirectory)

        if [[ ! -d "$dst" ]]
        then
            local src=$(getSourceDirectory)
            local cloneUrl=$(getCloneUrl)

            if [[ ! -d "$dst" ]]
            then
                mkdir --parents "$dst"
            fi

            git archive --remote "$src" "$(getBranch)" | tar --extract --touch --directory="$dst"
            linkConfiguration
        fi

        if [[ -f "$dst/Makefile" ]]
        then
            make --directory="$dst" --jobs=$(nproc) \
                APP_ENVIRONMENT=prod
                #CARGO_FLAGS="--target-dir $dst/../target --out-dir $dst/target"
        fi
        migrateDatabase

        publish
        removeOldRelease "$(getRealPublicDirectory)/.."

        info "Published in $(( $(date +%s) - $start )) seconds"
    fi
}

function linkConfiguration()
{
    local config="/etc/app/$(getProjectName)"
    local dst=$(getRealPublicDirectory)

    if [[ -d "$config" ]]
    then
        for src in $(find "$config" -type f)
        do
            local link=$(echo $src | sed "s~$config~$dst~")
            local dir=$(basename $link)

            if [[ ! -d "$dir" ]]
            then
                mkdir --parent "$dir"
            fi

            ln --symbolic --force $src $link
        done
    fi
}

function migrateDatabase()
{
    local database='';
    local migration="migration_$database";

    # https://dba.stackexchange.com/questions/183982/make-postgres-database-temporarily-read-only-for-performing-volume-snapshots
    # begin;
    # // @TODO stop modif
    # pg_dump $database > $database.sql
    # create database $migration
    # psql -f $database.sql $migration
    # // @TODO excute migration
    # drop database $database;
    # alter database $migration rename to $database;
    # // @TODO allow modif
    # commit;
}

function publish()
{
    local src=$(getRealPublicDirectory)
    local dst=$(getPublicDirectory)

    ln --symbolic --force --no-target-directory "$src" "$dst"
}

function removeOldRelease()
{
    local dir="$1"
    local old_releases=$(ls -1 -t "$dir" | tail +6)

    info "Remove oldest repository"

    for release in $old_releases
    do
        rm --recursive --force "$dir/$release"
    done
}

function ghPages()
{
    info 'Publish static pages'

    local src=$(getSourceDirectory)
    local dst=$(getPublicDirectory | sed "s~$PUBLIC_REPOSITORIES_DIR~$WEBROOT_DIR~")

    if [[ ! -d "$dst" ]]
    then
        git clone --quiet --branch gh-pages "$src" "$dst"
    else
        cd "$dst"
        git fetch --quiet origin
        git reset --quiet --hard origin/gh-pages
    fi
}

function getProjectName()
{
    echo $(basename $(dirname $(getPublicDirectory)))
}

function getSourceDirectory()
{
    pwd
}

function getPublicDirectory()
{
    local src=$(getSourceDirectory)

    echo "$src" | sed "s~$REPOSITORIES_DIR~$PUBLIC_REPOSITORIES_DIR~" | sed 's~\.git$~/current~'
}

function getRealPublicDirectory()
{
    local src=$(getPublicDirectory)

    echo "$src" | sed "s~/current$~/releases/$NEWREV~"
}

function getCloneUrl()
{
    local src=$(getSourceDirectory)

    echo "$src" | sed "s~$REPOSITORIES_DIR~git://$GIT_DOMAIN~"
}

function getBranch()
{
    echo $(git rev-parse --symbolic --abbrev-ref $REFNAME 2> /dev/null)
}

function info()
{
    println BLUE "$1"
}

function success()
{
    println GREEN "$1"
}

function warning()
{
    println ORANGE "$1"
}

function error()
{
    println RED "$1"
}

function println()
{
    print "$1" "$2"
    echo
}

function print()
{
    local NONE=$(tput -Txterm sgr0)

    local color=$1
    local message=$2

    case "$color" in
        RED)
            color=$(tput -Txterm setaf 1)
        ;;
        GREEN)
            color=$(tput -Txterm setaf 2)
        ;;
        ORANGE)
            color=$(tput -Txterm setaf 3)
        ;;
        BLUE)
            color=$(tput -Txterm setaf 4)
        ;;
        *)
            color=$NONE
        ;;
    esac

    echo -n "${color}$message${NONE}"
}

function restart()
{
    local service=$1

    if $(shouldPublish)
    then
        sudo systemctl restart $service
        info "$service restarted"
    fi
}

if [ "$0" = "$BASH_SOURCE" ]
then
    main
fi
